name: Build Modules
on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true

  workflow_dispatch:

jobs:
  run:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Decode keystore and set path
        if: env.KEYSTORE != null
        env:
          KEYSTORE: ${{ secrets.KEYSTORE }}
        run: |
          echo "$KEYSTORE" | base64 -d > revanced.keystore
          echo "KEYSTORE_PATH=$(pwd)/revanced.keystore" >> "$GITHUB_ENV"

      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config.json
            fi
          fi

      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

      - name: Build modules/APKs
        run: if [ -f "config.json" ]; then ./build.sh config.json; else ./build.sh config.toml; fi
        env:
          KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASS: ${{ secrets.KEY_PASS }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: $GITHUB_REPOSITORY
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Get output
        id: get_output
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build.tmp

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          release_name: ReVanced
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          git checkout -f update || git switch --discard-changes --orphan update
          cp -f build.tmp build.md
          get_update_json() {
            echo "{
            \"version\": \"$1\",
            \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }},
            \"zipUrl\": \"$2\",
            \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build.md\"
          }"
          }

          cd build || { echo "build folder not found"; exit 1; }
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop)
            if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
            UPDATE_JSON="${UPDATE_JSON##*/}"
            VER=$(echo "$ZIP_S" | grep version=)
            VER="${VER##*=}"
            DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
          done
          cd ..

          find . -name "*-update.json" | grep . || : >dummy-update.json

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_checkout: true
          file_pattern: build.md *-update.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Report to Telegram
        env:
          TG_TOKEN: ${{ secrets.TG_TOKEN }}
          TG_CHAT: ${{ secrets.TG_CHAT }}
        if: env.TG_TOKEN != null && env.TG_CHAT != null
        run: |
          echo "--- Preparing Telegram Notification ---"
          cd build || { echo "build folder not found"; exit 1; }

          echo "Scanning for build artifacts..."
          NL=$'\n'
          APKS=""
          MODULES=""
          APK_COUNT=0
          MODULE_COUNT=0
          
          for OUTPUT in *; do
            DL_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            if [[ $OUTPUT = *.apk ]]; then
              APKS+="${NL}üì¶[${OUTPUT}](${DL_URL})"
              APK_COUNT=$((APK_COUNT + 1))
            elif [[ $OUTPUT = *.zip ]]; then
              MODULES+="${NL}üì¶[${OUTPUT}](${DL_URL})"
              MODULE_COUNT=$((MODULE_COUNT + 1))
            fi
          done
          MODULES=${MODULES#"$NL"}
          APKS=${APKS#"$NL"}

          BODY="$(sed 's/^\* \*\*/‚Ü™ \*\*/g; s/^\* `/‚Ü™ \*\*/g; s/`/\*/g; s/^\* /\‚Ü™/g; s/\*\*/\*/g; s/###//g; s/^- /‚Ü™ /g; /^==/d;' ../build.md)"
          
          # Build download links section conditionally
          DOWNLOAD_SECTION=""
          if [ $MODULE_COUNT -gt 0 ] || [ $APK_COUNT -gt 0 ]; then
            DOWNLOAD_SECTION="*üîó Download Links:*"
            if [ $MODULE_COUNT -gt 0 ]; then
              DOWNLOAD_SECTION="${DOWNLOAD_SECTION}${NL}Modules:${NL}${MODULES}"
            fi
            if [ $APK_COUNT -gt 0 ]; then
              DOWNLOAD_SECTION="${DOWNLOAD_SECTION}${NL}${NL}APKs:${NL}${APKS}"
            fi
            DOWNLOAD_SECTION="${DOWNLOAD_SECTION}${NL}"
          fi
          
          # Build files notification section conditionally
          FILES_SECTION=""
          if [ $MODULE_COUNT -gt 0 ] || [ $APK_COUNT -gt 0 ]; then
            FILES_SECTION="*üìÅ Files will be sent below ‚¨áÔ∏è*${NL}${NL}"
          fi

          MSG="*New build completed! üéâ*

          ${BODY}

          ${FILES_SECTION}${DOWNLOAD_SECTION}

          *üìä Build Info:*
          ‚Ü™ Version: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          ‚Ü™ Commit: [\`${GITHUB_SHA:0:7}\`](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA})
          ‚Ü™ Repository: [${GITHUB_REPOSITORY}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY})
          "
          echo "'$MSG'"
          MSG=${MSG:0:4000}  # Reduced for space since we're sending files too

          # First send the summary message with links
          echo "--- Sending Summary Message ---"
          POST="https://api.telegram.org/bot${TG_TOKEN}/sendMessage"
          curl -X POST --data-urlencode "parse_mode=Markdown" --data-urlencode "disable_web_page_preview=true" --data-urlencode "text=${MSG}" --data-urlencode "chat_id=${TG_CHAT}" "$POST"
          sleep 2  # Give message time to appear first

          # Then send all APK files (only if they exist)
          if [ $APK_COUNT -gt 0 ]; then
            echo "--- Sending APK Files ---"
            for OUTPUT in *.apk; do
              [ "$OUTPUT" = "*.apk" ] && continue
              echo "Sending APK: $OUTPUT"
              FILE_SIZE=$(du -h "$OUTPUT" | cut -f1)
              CAPTION="üì± <b>${OUTPUT}</b>%0Aüìè Size: ${FILE_SIZE}%0Aüè∑Ô∏è Build: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}"
              
              curl -F "document=@$OUTPUT" \
                   -F "caption=${CAPTION}" \
                   -F "parse_mode=HTML" \
                   "https://api.telegram.org/bot${TG_TOKEN}/sendDocument?chat_id=${TG_CHAT}"
              sleep 1  # Rate limiting
            done
          else
            echo "--- No APK files to send ---"
          fi

          # Finally send all ZIP/Module files (only if they exist)
          if [ $MODULE_COUNT -gt 0 ]; then
            echo "--- Sending Module Files ---"
            for OUTPUT in *.zip; do
              [ "$OUTPUT" = "*.zip" ] && continue
              echo "Sending Module: $OUTPUT"
              FILE_SIZE=$(du -h "$OUTPUT" | cut -f1)
              CAPTION="üì¶ <b>${OUTPUT}</b>%0Aüìè Size: ${FILE_SIZE}%0Aüè∑Ô∏è Build: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}"
              
              curl -F "document=@$OUTPUT" \
                   -F "caption=${CAPTION}" \
                   -F "parse_mode=HTML" \
                   "https://api.telegram.org/bot${TG_TOKEN}/sendDocument?chat_id=${TG_CHAT}"
              sleep 1  # Rate limiting
            done
          else
            echo "--- No Module files to send ---"
          fi
